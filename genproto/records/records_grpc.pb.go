// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v5.28.3
// source: records.proto

package proto

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	PetRecordService_CreatePet_FullMethodName          = "/petrecord.PetRecordService/CreatePet"
	PetRecordService_GetPet_FullMethodName             = "/petrecord.PetRecordService/GetPet"
	PetRecordService_UpdatePet_FullMethodName          = "/petrecord.PetRecordService/UpdatePet"
	PetRecordService_DeletePet_FullMethodName          = "/petrecord.PetRecordService/DeletePet"
	PetRecordService_ListPets_FullMethodName           = "/petrecord.PetRecordService/ListPets"
	PetRecordService_CreateExamination_FullMethodName  = "/petrecord.PetRecordService/CreateExamination"
	PetRecordService_GetExamination_FullMethodName     = "/petrecord.PetRecordService/GetExamination"
	PetRecordService_UpdateExamination_FullMethodName  = "/petrecord.PetRecordService/UpdateExamination"
	PetRecordService_DeleteExamination_FullMethodName  = "/petrecord.PetRecordService/DeleteExamination"
	PetRecordService_ListExaminations_FullMethodName   = "/petrecord.PetRecordService/ListExaminations"
	PetRecordService_CreateVaccination_FullMethodName  = "/petrecord.PetRecordService/CreateVaccination"
	PetRecordService_GetVaccination_FullMethodName     = "/petrecord.PetRecordService/GetVaccination"
	PetRecordService_UpdateVaccination_FullMethodName  = "/petrecord.PetRecordService/UpdateVaccination"
	PetRecordService_DeleteVaccination_FullMethodName  = "/petrecord.PetRecordService/DeleteVaccination"
	PetRecordService_ListVaccinations_FullMethodName   = "/petrecord.PetRecordService/ListVaccinations"
	PetRecordService_CreatePrescription_FullMethodName = "/petrecord.PetRecordService/CreatePrescription"
	PetRecordService_GetPrescription_FullMethodName    = "/petrecord.PetRecordService/GetPrescription"
	PetRecordService_UpdatePrescription_FullMethodName = "/petrecord.PetRecordService/UpdatePrescription"
	PetRecordService_DeletePrescription_FullMethodName = "/petrecord.PetRecordService/DeletePrescription"
	PetRecordService_ListPrescriptions_FullMethodName  = "/petrecord.PetRecordService/ListPrescriptions"
)

// PetRecordServiceClient is the client API for PetRecordService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
//
// Service definition
type PetRecordServiceClient interface {
	// Pet operations
	CreatePet(ctx context.Context, in *CreatePetRequest, opts ...grpc.CallOption) (*CreatePetResponse, error)
	GetPet(ctx context.Context, in *GetPetRequest, opts ...grpc.CallOption) (*GetPetResponse, error)
	UpdatePet(ctx context.Context, in *UpdatePetRequest, opts ...grpc.CallOption) (*UpdatePetResponse, error)
	DeletePet(ctx context.Context, in *DeletePetRequest, opts ...grpc.CallOption) (*DeletePetResponse, error)
	ListPets(ctx context.Context, in *ListPetsRequest, opts ...grpc.CallOption) (*ListPetsResponse, error)
	// Examination operations
	CreateExamination(ctx context.Context, in *CreateExaminationRequest, opts ...grpc.CallOption) (*CreateExaminationResponse, error)
	GetExamination(ctx context.Context, in *GetExaminationRequest, opts ...grpc.CallOption) (*GetExaminationResponse, error)
	UpdateExamination(ctx context.Context, in *UpdateExaminationRequest, opts ...grpc.CallOption) (*UpdateExaminationResponse, error)
	DeleteExamination(ctx context.Context, in *DeleteExaminationRequest, opts ...grpc.CallOption) (*DeleteExaminationResponse, error)
	ListExaminations(ctx context.Context, in *ListExaminationsRequest, opts ...grpc.CallOption) (*ListExaminationsResponse, error)
	// Vaccination operations
	CreateVaccination(ctx context.Context, in *CreateVaccinationRequest, opts ...grpc.CallOption) (*CreateVaccinationResponse, error)
	GetVaccination(ctx context.Context, in *GetVaccinationRequest, opts ...grpc.CallOption) (*GetVaccinationResponse, error)
	UpdateVaccination(ctx context.Context, in *UpdateVaccinationRequest, opts ...grpc.CallOption) (*UpdateVaccinationResponse, error)
	DeleteVaccination(ctx context.Context, in *DeleteVaccinationRequest, opts ...grpc.CallOption) (*DeleteVaccinationResponse, error)
	ListVaccinations(ctx context.Context, in *ListVaccinationsRequest, opts ...grpc.CallOption) (*ListVaccinationsResponse, error)
	// Prescription operations
	CreatePrescription(ctx context.Context, in *CreatePrescriptionRequest, opts ...grpc.CallOption) (*CreatePrescriptionResponse, error)
	GetPrescription(ctx context.Context, in *GetPrescriptionRequest, opts ...grpc.CallOption) (*GetPrescriptionResponse, error)
	UpdatePrescription(ctx context.Context, in *UpdatePrescriptionRequest, opts ...grpc.CallOption) (*UpdatePrescriptionResponse, error)
	DeletePrescription(ctx context.Context, in *DeletePrescriptionRequest, opts ...grpc.CallOption) (*DeletePrescriptionResponse, error)
	ListPrescriptions(ctx context.Context, in *ListPrescriptionsRequest, opts ...grpc.CallOption) (*ListPrescriptionsResponse, error)
}

type petRecordServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewPetRecordServiceClient(cc grpc.ClientConnInterface) PetRecordServiceClient {
	return &petRecordServiceClient{cc}
}

func (c *petRecordServiceClient) CreatePet(ctx context.Context, in *CreatePetRequest, opts ...grpc.CallOption) (*CreatePetResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CreatePetResponse)
	err := c.cc.Invoke(ctx, PetRecordService_CreatePet_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *petRecordServiceClient) GetPet(ctx context.Context, in *GetPetRequest, opts ...grpc.CallOption) (*GetPetResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetPetResponse)
	err := c.cc.Invoke(ctx, PetRecordService_GetPet_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *petRecordServiceClient) UpdatePet(ctx context.Context, in *UpdatePetRequest, opts ...grpc.CallOption) (*UpdatePetResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(UpdatePetResponse)
	err := c.cc.Invoke(ctx, PetRecordService_UpdatePet_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *petRecordServiceClient) DeletePet(ctx context.Context, in *DeletePetRequest, opts ...grpc.CallOption) (*DeletePetResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(DeletePetResponse)
	err := c.cc.Invoke(ctx, PetRecordService_DeletePet_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *petRecordServiceClient) ListPets(ctx context.Context, in *ListPetsRequest, opts ...grpc.CallOption) (*ListPetsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListPetsResponse)
	err := c.cc.Invoke(ctx, PetRecordService_ListPets_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *petRecordServiceClient) CreateExamination(ctx context.Context, in *CreateExaminationRequest, opts ...grpc.CallOption) (*CreateExaminationResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CreateExaminationResponse)
	err := c.cc.Invoke(ctx, PetRecordService_CreateExamination_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *petRecordServiceClient) GetExamination(ctx context.Context, in *GetExaminationRequest, opts ...grpc.CallOption) (*GetExaminationResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetExaminationResponse)
	err := c.cc.Invoke(ctx, PetRecordService_GetExamination_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *petRecordServiceClient) UpdateExamination(ctx context.Context, in *UpdateExaminationRequest, opts ...grpc.CallOption) (*UpdateExaminationResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(UpdateExaminationResponse)
	err := c.cc.Invoke(ctx, PetRecordService_UpdateExamination_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *petRecordServiceClient) DeleteExamination(ctx context.Context, in *DeleteExaminationRequest, opts ...grpc.CallOption) (*DeleteExaminationResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(DeleteExaminationResponse)
	err := c.cc.Invoke(ctx, PetRecordService_DeleteExamination_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *petRecordServiceClient) ListExaminations(ctx context.Context, in *ListExaminationsRequest, opts ...grpc.CallOption) (*ListExaminationsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListExaminationsResponse)
	err := c.cc.Invoke(ctx, PetRecordService_ListExaminations_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *petRecordServiceClient) CreateVaccination(ctx context.Context, in *CreateVaccinationRequest, opts ...grpc.CallOption) (*CreateVaccinationResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CreateVaccinationResponse)
	err := c.cc.Invoke(ctx, PetRecordService_CreateVaccination_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *petRecordServiceClient) GetVaccination(ctx context.Context, in *GetVaccinationRequest, opts ...grpc.CallOption) (*GetVaccinationResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetVaccinationResponse)
	err := c.cc.Invoke(ctx, PetRecordService_GetVaccination_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *petRecordServiceClient) UpdateVaccination(ctx context.Context, in *UpdateVaccinationRequest, opts ...grpc.CallOption) (*UpdateVaccinationResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(UpdateVaccinationResponse)
	err := c.cc.Invoke(ctx, PetRecordService_UpdateVaccination_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *petRecordServiceClient) DeleteVaccination(ctx context.Context, in *DeleteVaccinationRequest, opts ...grpc.CallOption) (*DeleteVaccinationResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(DeleteVaccinationResponse)
	err := c.cc.Invoke(ctx, PetRecordService_DeleteVaccination_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *petRecordServiceClient) ListVaccinations(ctx context.Context, in *ListVaccinationsRequest, opts ...grpc.CallOption) (*ListVaccinationsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListVaccinationsResponse)
	err := c.cc.Invoke(ctx, PetRecordService_ListVaccinations_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *petRecordServiceClient) CreatePrescription(ctx context.Context, in *CreatePrescriptionRequest, opts ...grpc.CallOption) (*CreatePrescriptionResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CreatePrescriptionResponse)
	err := c.cc.Invoke(ctx, PetRecordService_CreatePrescription_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *petRecordServiceClient) GetPrescription(ctx context.Context, in *GetPrescriptionRequest, opts ...grpc.CallOption) (*GetPrescriptionResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetPrescriptionResponse)
	err := c.cc.Invoke(ctx, PetRecordService_GetPrescription_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *petRecordServiceClient) UpdatePrescription(ctx context.Context, in *UpdatePrescriptionRequest, opts ...grpc.CallOption) (*UpdatePrescriptionResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(UpdatePrescriptionResponse)
	err := c.cc.Invoke(ctx, PetRecordService_UpdatePrescription_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *petRecordServiceClient) DeletePrescription(ctx context.Context, in *DeletePrescriptionRequest, opts ...grpc.CallOption) (*DeletePrescriptionResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(DeletePrescriptionResponse)
	err := c.cc.Invoke(ctx, PetRecordService_DeletePrescription_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *petRecordServiceClient) ListPrescriptions(ctx context.Context, in *ListPrescriptionsRequest, opts ...grpc.CallOption) (*ListPrescriptionsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListPrescriptionsResponse)
	err := c.cc.Invoke(ctx, PetRecordService_ListPrescriptions_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// PetRecordServiceServer is the server API for PetRecordService service.
// All implementations must embed UnimplementedPetRecordServiceServer
// for forward compatibility.
//
// Service definition
type PetRecordServiceServer interface {
	// Pet operations
	CreatePet(context.Context, *CreatePetRequest) (*CreatePetResponse, error)
	GetPet(context.Context, *GetPetRequest) (*GetPetResponse, error)
	UpdatePet(context.Context, *UpdatePetRequest) (*UpdatePetResponse, error)
	DeletePet(context.Context, *DeletePetRequest) (*DeletePetResponse, error)
	ListPets(context.Context, *ListPetsRequest) (*ListPetsResponse, error)
	// Examination operations
	CreateExamination(context.Context, *CreateExaminationRequest) (*CreateExaminationResponse, error)
	GetExamination(context.Context, *GetExaminationRequest) (*GetExaminationResponse, error)
	UpdateExamination(context.Context, *UpdateExaminationRequest) (*UpdateExaminationResponse, error)
	DeleteExamination(context.Context, *DeleteExaminationRequest) (*DeleteExaminationResponse, error)
	ListExaminations(context.Context, *ListExaminationsRequest) (*ListExaminationsResponse, error)
	// Vaccination operations
	CreateVaccination(context.Context, *CreateVaccinationRequest) (*CreateVaccinationResponse, error)
	GetVaccination(context.Context, *GetVaccinationRequest) (*GetVaccinationResponse, error)
	UpdateVaccination(context.Context, *UpdateVaccinationRequest) (*UpdateVaccinationResponse, error)
	DeleteVaccination(context.Context, *DeleteVaccinationRequest) (*DeleteVaccinationResponse, error)
	ListVaccinations(context.Context, *ListVaccinationsRequest) (*ListVaccinationsResponse, error)
	// Prescription operations
	CreatePrescription(context.Context, *CreatePrescriptionRequest) (*CreatePrescriptionResponse, error)
	GetPrescription(context.Context, *GetPrescriptionRequest) (*GetPrescriptionResponse, error)
	UpdatePrescription(context.Context, *UpdatePrescriptionRequest) (*UpdatePrescriptionResponse, error)
	DeletePrescription(context.Context, *DeletePrescriptionRequest) (*DeletePrescriptionResponse, error)
	ListPrescriptions(context.Context, *ListPrescriptionsRequest) (*ListPrescriptionsResponse, error)
	mustEmbedUnimplementedPetRecordServiceServer()
}

// UnimplementedPetRecordServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedPetRecordServiceServer struct{}

func (UnimplementedPetRecordServiceServer) CreatePet(context.Context, *CreatePetRequest) (*CreatePetResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreatePet not implemented")
}
func (UnimplementedPetRecordServiceServer) GetPet(context.Context, *GetPetRequest) (*GetPetResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetPet not implemented")
}
func (UnimplementedPetRecordServiceServer) UpdatePet(context.Context, *UpdatePetRequest) (*UpdatePetResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdatePet not implemented")
}
func (UnimplementedPetRecordServiceServer) DeletePet(context.Context, *DeletePetRequest) (*DeletePetResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeletePet not implemented")
}
func (UnimplementedPetRecordServiceServer) ListPets(context.Context, *ListPetsRequest) (*ListPetsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListPets not implemented")
}
func (UnimplementedPetRecordServiceServer) CreateExamination(context.Context, *CreateExaminationRequest) (*CreateExaminationResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateExamination not implemented")
}
func (UnimplementedPetRecordServiceServer) GetExamination(context.Context, *GetExaminationRequest) (*GetExaminationResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetExamination not implemented")
}
func (UnimplementedPetRecordServiceServer) UpdateExamination(context.Context, *UpdateExaminationRequest) (*UpdateExaminationResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateExamination not implemented")
}
func (UnimplementedPetRecordServiceServer) DeleteExamination(context.Context, *DeleteExaminationRequest) (*DeleteExaminationResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteExamination not implemented")
}
func (UnimplementedPetRecordServiceServer) ListExaminations(context.Context, *ListExaminationsRequest) (*ListExaminationsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListExaminations not implemented")
}
func (UnimplementedPetRecordServiceServer) CreateVaccination(context.Context, *CreateVaccinationRequest) (*CreateVaccinationResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateVaccination not implemented")
}
func (UnimplementedPetRecordServiceServer) GetVaccination(context.Context, *GetVaccinationRequest) (*GetVaccinationResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetVaccination not implemented")
}
func (UnimplementedPetRecordServiceServer) UpdateVaccination(context.Context, *UpdateVaccinationRequest) (*UpdateVaccinationResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateVaccination not implemented")
}
func (UnimplementedPetRecordServiceServer) DeleteVaccination(context.Context, *DeleteVaccinationRequest) (*DeleteVaccinationResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteVaccination not implemented")
}
func (UnimplementedPetRecordServiceServer) ListVaccinations(context.Context, *ListVaccinationsRequest) (*ListVaccinationsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListVaccinations not implemented")
}
func (UnimplementedPetRecordServiceServer) CreatePrescription(context.Context, *CreatePrescriptionRequest) (*CreatePrescriptionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreatePrescription not implemented")
}
func (UnimplementedPetRecordServiceServer) GetPrescription(context.Context, *GetPrescriptionRequest) (*GetPrescriptionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetPrescription not implemented")
}
func (UnimplementedPetRecordServiceServer) UpdatePrescription(context.Context, *UpdatePrescriptionRequest) (*UpdatePrescriptionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdatePrescription not implemented")
}
func (UnimplementedPetRecordServiceServer) DeletePrescription(context.Context, *DeletePrescriptionRequest) (*DeletePrescriptionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeletePrescription not implemented")
}
func (UnimplementedPetRecordServiceServer) ListPrescriptions(context.Context, *ListPrescriptionsRequest) (*ListPrescriptionsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListPrescriptions not implemented")
}
func (UnimplementedPetRecordServiceServer) mustEmbedUnimplementedPetRecordServiceServer() {}
func (UnimplementedPetRecordServiceServer) testEmbeddedByValue()                          {}

// UnsafePetRecordServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to PetRecordServiceServer will
// result in compilation errors.
type UnsafePetRecordServiceServer interface {
	mustEmbedUnimplementedPetRecordServiceServer()
}

func RegisterPetRecordServiceServer(s grpc.ServiceRegistrar, srv PetRecordServiceServer) {
	// If the following call pancis, it indicates UnimplementedPetRecordServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&PetRecordService_ServiceDesc, srv)
}

func _PetRecordService_CreatePet_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreatePetRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PetRecordServiceServer).CreatePet(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PetRecordService_CreatePet_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PetRecordServiceServer).CreatePet(ctx, req.(*CreatePetRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PetRecordService_GetPet_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetPetRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PetRecordServiceServer).GetPet(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PetRecordService_GetPet_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PetRecordServiceServer).GetPet(ctx, req.(*GetPetRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PetRecordService_UpdatePet_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdatePetRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PetRecordServiceServer).UpdatePet(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PetRecordService_UpdatePet_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PetRecordServiceServer).UpdatePet(ctx, req.(*UpdatePetRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PetRecordService_DeletePet_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeletePetRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PetRecordServiceServer).DeletePet(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PetRecordService_DeletePet_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PetRecordServiceServer).DeletePet(ctx, req.(*DeletePetRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PetRecordService_ListPets_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListPetsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PetRecordServiceServer).ListPets(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PetRecordService_ListPets_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PetRecordServiceServer).ListPets(ctx, req.(*ListPetsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PetRecordService_CreateExamination_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateExaminationRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PetRecordServiceServer).CreateExamination(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PetRecordService_CreateExamination_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PetRecordServiceServer).CreateExamination(ctx, req.(*CreateExaminationRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PetRecordService_GetExamination_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetExaminationRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PetRecordServiceServer).GetExamination(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PetRecordService_GetExamination_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PetRecordServiceServer).GetExamination(ctx, req.(*GetExaminationRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PetRecordService_UpdateExamination_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateExaminationRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PetRecordServiceServer).UpdateExamination(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PetRecordService_UpdateExamination_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PetRecordServiceServer).UpdateExamination(ctx, req.(*UpdateExaminationRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PetRecordService_DeleteExamination_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteExaminationRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PetRecordServiceServer).DeleteExamination(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PetRecordService_DeleteExamination_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PetRecordServiceServer).DeleteExamination(ctx, req.(*DeleteExaminationRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PetRecordService_ListExaminations_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListExaminationsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PetRecordServiceServer).ListExaminations(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PetRecordService_ListExaminations_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PetRecordServiceServer).ListExaminations(ctx, req.(*ListExaminationsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PetRecordService_CreateVaccination_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateVaccinationRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PetRecordServiceServer).CreateVaccination(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PetRecordService_CreateVaccination_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PetRecordServiceServer).CreateVaccination(ctx, req.(*CreateVaccinationRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PetRecordService_GetVaccination_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetVaccinationRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PetRecordServiceServer).GetVaccination(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PetRecordService_GetVaccination_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PetRecordServiceServer).GetVaccination(ctx, req.(*GetVaccinationRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PetRecordService_UpdateVaccination_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateVaccinationRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PetRecordServiceServer).UpdateVaccination(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PetRecordService_UpdateVaccination_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PetRecordServiceServer).UpdateVaccination(ctx, req.(*UpdateVaccinationRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PetRecordService_DeleteVaccination_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteVaccinationRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PetRecordServiceServer).DeleteVaccination(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PetRecordService_DeleteVaccination_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PetRecordServiceServer).DeleteVaccination(ctx, req.(*DeleteVaccinationRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PetRecordService_ListVaccinations_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListVaccinationsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PetRecordServiceServer).ListVaccinations(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PetRecordService_ListVaccinations_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PetRecordServiceServer).ListVaccinations(ctx, req.(*ListVaccinationsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PetRecordService_CreatePrescription_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreatePrescriptionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PetRecordServiceServer).CreatePrescription(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PetRecordService_CreatePrescription_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PetRecordServiceServer).CreatePrescription(ctx, req.(*CreatePrescriptionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PetRecordService_GetPrescription_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetPrescriptionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PetRecordServiceServer).GetPrescription(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PetRecordService_GetPrescription_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PetRecordServiceServer).GetPrescription(ctx, req.(*GetPrescriptionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PetRecordService_UpdatePrescription_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdatePrescriptionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PetRecordServiceServer).UpdatePrescription(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PetRecordService_UpdatePrescription_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PetRecordServiceServer).UpdatePrescription(ctx, req.(*UpdatePrescriptionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PetRecordService_DeletePrescription_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeletePrescriptionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PetRecordServiceServer).DeletePrescription(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PetRecordService_DeletePrescription_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PetRecordServiceServer).DeletePrescription(ctx, req.(*DeletePrescriptionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PetRecordService_ListPrescriptions_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListPrescriptionsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PetRecordServiceServer).ListPrescriptions(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PetRecordService_ListPrescriptions_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PetRecordServiceServer).ListPrescriptions(ctx, req.(*ListPrescriptionsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// PetRecordService_ServiceDesc is the grpc.ServiceDesc for PetRecordService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var PetRecordService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "petrecord.PetRecordService",
	HandlerType: (*PetRecordServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreatePet",
			Handler:    _PetRecordService_CreatePet_Handler,
		},
		{
			MethodName: "GetPet",
			Handler:    _PetRecordService_GetPet_Handler,
		},
		{
			MethodName: "UpdatePet",
			Handler:    _PetRecordService_UpdatePet_Handler,
		},
		{
			MethodName: "DeletePet",
			Handler:    _PetRecordService_DeletePet_Handler,
		},
		{
			MethodName: "ListPets",
			Handler:    _PetRecordService_ListPets_Handler,
		},
		{
			MethodName: "CreateExamination",
			Handler:    _PetRecordService_CreateExamination_Handler,
		},
		{
			MethodName: "GetExamination",
			Handler:    _PetRecordService_GetExamination_Handler,
		},
		{
			MethodName: "UpdateExamination",
			Handler:    _PetRecordService_UpdateExamination_Handler,
		},
		{
			MethodName: "DeleteExamination",
			Handler:    _PetRecordService_DeleteExamination_Handler,
		},
		{
			MethodName: "ListExaminations",
			Handler:    _PetRecordService_ListExaminations_Handler,
		},
		{
			MethodName: "CreateVaccination",
			Handler:    _PetRecordService_CreateVaccination_Handler,
		},
		{
			MethodName: "GetVaccination",
			Handler:    _PetRecordService_GetVaccination_Handler,
		},
		{
			MethodName: "UpdateVaccination",
			Handler:    _PetRecordService_UpdateVaccination_Handler,
		},
		{
			MethodName: "DeleteVaccination",
			Handler:    _PetRecordService_DeleteVaccination_Handler,
		},
		{
			MethodName: "ListVaccinations",
			Handler:    _PetRecordService_ListVaccinations_Handler,
		},
		{
			MethodName: "CreatePrescription",
			Handler:    _PetRecordService_CreatePrescription_Handler,
		},
		{
			MethodName: "GetPrescription",
			Handler:    _PetRecordService_GetPrescription_Handler,
		},
		{
			MethodName: "UpdatePrescription",
			Handler:    _PetRecordService_UpdatePrescription_Handler,
		},
		{
			MethodName: "DeletePrescription",
			Handler:    _PetRecordService_DeletePrescription_Handler,
		},
		{
			MethodName: "ListPrescriptions",
			Handler:    _PetRecordService_ListPrescriptions_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "records.proto",
}
