// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v5.28.3
// source: products.proto

package products

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	ProductService_GetFoodByID_FullMethodName            = "/ProductService/GetFoodByID"
	ProductService_GetAccessoryByID_FullMethodName       = "/ProductService/GetAccessoryByID"
	ProductService_GetMedicineByID_FullMethodName        = "/ProductService/GetMedicineByID"
	ProductService_ListFoods_FullMethodName              = "/ProductService/ListFoods"
	ProductService_ListAccessories_FullMethodName        = "/ProductService/ListAccessories"
	ProductService_ListMedicines_FullMethodName          = "/ProductService/ListMedicines"
	ProductService_CreateFood_FullMethodName             = "/ProductService/CreateFood"
	ProductService_CreateAccessory_FullMethodName        = "/ProductService/CreateAccessory"
	ProductService_CreateMedicine_FullMethodName         = "/ProductService/CreateMedicine"
	ProductService_UpdateFood_FullMethodName             = "/ProductService/UpdateFood"
	ProductService_UpdateAccessory_FullMethodName        = "/ProductService/UpdateAccessory"
	ProductService_UpdateMedicine_FullMethodName         = "/ProductService/UpdateMedicine"
	ProductService_DeleteFood_FullMethodName             = "/ProductService/DeleteFood"
	ProductService_DeleteAccessory_FullMethodName        = "/ProductService/DeleteAccessory"
	ProductService_DeleteMedicine_FullMethodName         = "/ProductService/DeleteMedicine"
	ProductService_GetBranchByID_FullMethodName          = "/ProductService/GetBranchByID"
	ProductService_ListBranches_FullMethodName           = "/ProductService/ListBranches"
	ProductService_GetBranchInventory_FullMethodName     = "/ProductService/GetBranchInventory"
	ProductService_UpdateBranchInventory_FullMethodName  = "/ProductService/UpdateBranchInventory"
	ProductService_ListAttachableProducts_FullMethodName = "/ProductService/ListAttachableProducts"
	ProductService_ListAllProducts_FullMethodName        = "/ProductService/ListAllProducts"
)

// ProductServiceClient is the client API for ProductService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ProductServiceClient interface {
	GetFoodByID(ctx context.Context, in *GetFoodRequest, opts ...grpc.CallOption) (*Food, error)
	GetAccessoryByID(ctx context.Context, in *GetAccessoryRequest, opts ...grpc.CallOption) (*Accessory, error)
	GetMedicineByID(ctx context.Context, in *GetMedicineRequest, opts ...grpc.CallOption) (*Medicine, error)
	ListFoods(ctx context.Context, in *ListFoodRequest, opts ...grpc.CallOption) (*ListFoodResponse, error)
	ListAccessories(ctx context.Context, in *ListAccessoryRequest, opts ...grpc.CallOption) (*ListAccessoryResponse, error)
	ListMedicines(ctx context.Context, in *ListMedicineRequest, opts ...grpc.CallOption) (*ListMedicineResponse, error)
	CreateFood(ctx context.Context, in *CreateFoodRequest, opts ...grpc.CallOption) (*CreateFoodResponse, error)
	CreateAccessory(ctx context.Context, in *CreateAccessoryRequest, opts ...grpc.CallOption) (*CreateAccessoryResponse, error)
	CreateMedicine(ctx context.Context, in *CreateMedicineRequest, opts ...grpc.CallOption) (*CreateMedicineResponse, error)
	UpdateFood(ctx context.Context, in *UpdateFoodRequest, opts ...grpc.CallOption) (*UpdateFoodResponse, error)
	UpdateAccessory(ctx context.Context, in *UpdateAccessoryRequest, opts ...grpc.CallOption) (*UpdateAccessoryResponse, error)
	UpdateMedicine(ctx context.Context, in *UpdateMedicineRequest, opts ...grpc.CallOption) (*UpdateMedicineResponse, error)
	DeleteFood(ctx context.Context, in *DeleteFoodRequest, opts ...grpc.CallOption) (*DeleteFoodResponse, error)
	DeleteAccessory(ctx context.Context, in *DeleteAccessoryRequest, opts ...grpc.CallOption) (*DeleteAccessoryResponse, error)
	DeleteMedicine(ctx context.Context, in *DeleteMedicineRequest, opts ...grpc.CallOption) (*DeleteMedicineResponse, error)
	GetBranchByID(ctx context.Context, in *GetBranchRequest, opts ...grpc.CallOption) (*Branch, error)
	ListBranches(ctx context.Context, in *ListBranchRequest, opts ...grpc.CallOption) (*ListBranchResponse, error)
	GetBranchInventory(ctx context.Context, in *GetBranchInventoryRequest, opts ...grpc.CallOption) (*GetBranchInventoryResponse, error)
	UpdateBranchInventory(ctx context.Context, in *UpdateBranchInventoryRequest, opts ...grpc.CallOption) (*UpdateBranchInventoryResponse, error)
	ListAttachableProducts(ctx context.Context, in *ListAttachableProductsRequest, opts ...grpc.CallOption) (*ListAttachableProductsResponse, error)
	ListAllProducts(ctx context.Context, in *ListAllProductsRequest, opts ...grpc.CallOption) (*ListAllProductsResponse, error)
}

type productServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewProductServiceClient(cc grpc.ClientConnInterface) ProductServiceClient {
	return &productServiceClient{cc}
}

func (c *productServiceClient) GetFoodByID(ctx context.Context, in *GetFoodRequest, opts ...grpc.CallOption) (*Food, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Food)
	err := c.cc.Invoke(ctx, ProductService_GetFoodByID_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *productServiceClient) GetAccessoryByID(ctx context.Context, in *GetAccessoryRequest, opts ...grpc.CallOption) (*Accessory, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Accessory)
	err := c.cc.Invoke(ctx, ProductService_GetAccessoryByID_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *productServiceClient) GetMedicineByID(ctx context.Context, in *GetMedicineRequest, opts ...grpc.CallOption) (*Medicine, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Medicine)
	err := c.cc.Invoke(ctx, ProductService_GetMedicineByID_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *productServiceClient) ListFoods(ctx context.Context, in *ListFoodRequest, opts ...grpc.CallOption) (*ListFoodResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListFoodResponse)
	err := c.cc.Invoke(ctx, ProductService_ListFoods_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *productServiceClient) ListAccessories(ctx context.Context, in *ListAccessoryRequest, opts ...grpc.CallOption) (*ListAccessoryResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListAccessoryResponse)
	err := c.cc.Invoke(ctx, ProductService_ListAccessories_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *productServiceClient) ListMedicines(ctx context.Context, in *ListMedicineRequest, opts ...grpc.CallOption) (*ListMedicineResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListMedicineResponse)
	err := c.cc.Invoke(ctx, ProductService_ListMedicines_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *productServiceClient) CreateFood(ctx context.Context, in *CreateFoodRequest, opts ...grpc.CallOption) (*CreateFoodResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CreateFoodResponse)
	err := c.cc.Invoke(ctx, ProductService_CreateFood_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *productServiceClient) CreateAccessory(ctx context.Context, in *CreateAccessoryRequest, opts ...grpc.CallOption) (*CreateAccessoryResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CreateAccessoryResponse)
	err := c.cc.Invoke(ctx, ProductService_CreateAccessory_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *productServiceClient) CreateMedicine(ctx context.Context, in *CreateMedicineRequest, opts ...grpc.CallOption) (*CreateMedicineResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CreateMedicineResponse)
	err := c.cc.Invoke(ctx, ProductService_CreateMedicine_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *productServiceClient) UpdateFood(ctx context.Context, in *UpdateFoodRequest, opts ...grpc.CallOption) (*UpdateFoodResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(UpdateFoodResponse)
	err := c.cc.Invoke(ctx, ProductService_UpdateFood_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *productServiceClient) UpdateAccessory(ctx context.Context, in *UpdateAccessoryRequest, opts ...grpc.CallOption) (*UpdateAccessoryResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(UpdateAccessoryResponse)
	err := c.cc.Invoke(ctx, ProductService_UpdateAccessory_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *productServiceClient) UpdateMedicine(ctx context.Context, in *UpdateMedicineRequest, opts ...grpc.CallOption) (*UpdateMedicineResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(UpdateMedicineResponse)
	err := c.cc.Invoke(ctx, ProductService_UpdateMedicine_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *productServiceClient) DeleteFood(ctx context.Context, in *DeleteFoodRequest, opts ...grpc.CallOption) (*DeleteFoodResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(DeleteFoodResponse)
	err := c.cc.Invoke(ctx, ProductService_DeleteFood_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *productServiceClient) DeleteAccessory(ctx context.Context, in *DeleteAccessoryRequest, opts ...grpc.CallOption) (*DeleteAccessoryResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(DeleteAccessoryResponse)
	err := c.cc.Invoke(ctx, ProductService_DeleteAccessory_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *productServiceClient) DeleteMedicine(ctx context.Context, in *DeleteMedicineRequest, opts ...grpc.CallOption) (*DeleteMedicineResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(DeleteMedicineResponse)
	err := c.cc.Invoke(ctx, ProductService_DeleteMedicine_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *productServiceClient) GetBranchByID(ctx context.Context, in *GetBranchRequest, opts ...grpc.CallOption) (*Branch, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Branch)
	err := c.cc.Invoke(ctx, ProductService_GetBranchByID_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *productServiceClient) ListBranches(ctx context.Context, in *ListBranchRequest, opts ...grpc.CallOption) (*ListBranchResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListBranchResponse)
	err := c.cc.Invoke(ctx, ProductService_ListBranches_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *productServiceClient) GetBranchInventory(ctx context.Context, in *GetBranchInventoryRequest, opts ...grpc.CallOption) (*GetBranchInventoryResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetBranchInventoryResponse)
	err := c.cc.Invoke(ctx, ProductService_GetBranchInventory_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *productServiceClient) UpdateBranchInventory(ctx context.Context, in *UpdateBranchInventoryRequest, opts ...grpc.CallOption) (*UpdateBranchInventoryResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(UpdateBranchInventoryResponse)
	err := c.cc.Invoke(ctx, ProductService_UpdateBranchInventory_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *productServiceClient) ListAttachableProducts(ctx context.Context, in *ListAttachableProductsRequest, opts ...grpc.CallOption) (*ListAttachableProductsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListAttachableProductsResponse)
	err := c.cc.Invoke(ctx, ProductService_ListAttachableProducts_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *productServiceClient) ListAllProducts(ctx context.Context, in *ListAllProductsRequest, opts ...grpc.CallOption) (*ListAllProductsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListAllProductsResponse)
	err := c.cc.Invoke(ctx, ProductService_ListAllProducts_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ProductServiceServer is the server API for ProductService service.
// All implementations must embed UnimplementedProductServiceServer
// for forward compatibility.
type ProductServiceServer interface {
	GetFoodByID(context.Context, *GetFoodRequest) (*Food, error)
	GetAccessoryByID(context.Context, *GetAccessoryRequest) (*Accessory, error)
	GetMedicineByID(context.Context, *GetMedicineRequest) (*Medicine, error)
	ListFoods(context.Context, *ListFoodRequest) (*ListFoodResponse, error)
	ListAccessories(context.Context, *ListAccessoryRequest) (*ListAccessoryResponse, error)
	ListMedicines(context.Context, *ListMedicineRequest) (*ListMedicineResponse, error)
	CreateFood(context.Context, *CreateFoodRequest) (*CreateFoodResponse, error)
	CreateAccessory(context.Context, *CreateAccessoryRequest) (*CreateAccessoryResponse, error)
	CreateMedicine(context.Context, *CreateMedicineRequest) (*CreateMedicineResponse, error)
	UpdateFood(context.Context, *UpdateFoodRequest) (*UpdateFoodResponse, error)
	UpdateAccessory(context.Context, *UpdateAccessoryRequest) (*UpdateAccessoryResponse, error)
	UpdateMedicine(context.Context, *UpdateMedicineRequest) (*UpdateMedicineResponse, error)
	DeleteFood(context.Context, *DeleteFoodRequest) (*DeleteFoodResponse, error)
	DeleteAccessory(context.Context, *DeleteAccessoryRequest) (*DeleteAccessoryResponse, error)
	DeleteMedicine(context.Context, *DeleteMedicineRequest) (*DeleteMedicineResponse, error)
	GetBranchByID(context.Context, *GetBranchRequest) (*Branch, error)
	ListBranches(context.Context, *ListBranchRequest) (*ListBranchResponse, error)
	GetBranchInventory(context.Context, *GetBranchInventoryRequest) (*GetBranchInventoryResponse, error)
	UpdateBranchInventory(context.Context, *UpdateBranchInventoryRequest) (*UpdateBranchInventoryResponse, error)
	ListAttachableProducts(context.Context, *ListAttachableProductsRequest) (*ListAttachableProductsResponse, error)
	ListAllProducts(context.Context, *ListAllProductsRequest) (*ListAllProductsResponse, error)
	mustEmbedUnimplementedProductServiceServer()
}

// UnimplementedProductServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedProductServiceServer struct{}

func (UnimplementedProductServiceServer) GetFoodByID(context.Context, *GetFoodRequest) (*Food, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetFoodByID not implemented")
}
func (UnimplementedProductServiceServer) GetAccessoryByID(context.Context, *GetAccessoryRequest) (*Accessory, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAccessoryByID not implemented")
}
func (UnimplementedProductServiceServer) GetMedicineByID(context.Context, *GetMedicineRequest) (*Medicine, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetMedicineByID not implemented")
}
func (UnimplementedProductServiceServer) ListFoods(context.Context, *ListFoodRequest) (*ListFoodResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListFoods not implemented")
}
func (UnimplementedProductServiceServer) ListAccessories(context.Context, *ListAccessoryRequest) (*ListAccessoryResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListAccessories not implemented")
}
func (UnimplementedProductServiceServer) ListMedicines(context.Context, *ListMedicineRequest) (*ListMedicineResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListMedicines not implemented")
}
func (UnimplementedProductServiceServer) CreateFood(context.Context, *CreateFoodRequest) (*CreateFoodResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateFood not implemented")
}
func (UnimplementedProductServiceServer) CreateAccessory(context.Context, *CreateAccessoryRequest) (*CreateAccessoryResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateAccessory not implemented")
}
func (UnimplementedProductServiceServer) CreateMedicine(context.Context, *CreateMedicineRequest) (*CreateMedicineResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateMedicine not implemented")
}
func (UnimplementedProductServiceServer) UpdateFood(context.Context, *UpdateFoodRequest) (*UpdateFoodResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateFood not implemented")
}
func (UnimplementedProductServiceServer) UpdateAccessory(context.Context, *UpdateAccessoryRequest) (*UpdateAccessoryResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateAccessory not implemented")
}
func (UnimplementedProductServiceServer) UpdateMedicine(context.Context, *UpdateMedicineRequest) (*UpdateMedicineResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateMedicine not implemented")
}
func (UnimplementedProductServiceServer) DeleteFood(context.Context, *DeleteFoodRequest) (*DeleteFoodResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteFood not implemented")
}
func (UnimplementedProductServiceServer) DeleteAccessory(context.Context, *DeleteAccessoryRequest) (*DeleteAccessoryResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteAccessory not implemented")
}
func (UnimplementedProductServiceServer) DeleteMedicine(context.Context, *DeleteMedicineRequest) (*DeleteMedicineResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteMedicine not implemented")
}
func (UnimplementedProductServiceServer) GetBranchByID(context.Context, *GetBranchRequest) (*Branch, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetBranchByID not implemented")
}
func (UnimplementedProductServiceServer) ListBranches(context.Context, *ListBranchRequest) (*ListBranchResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListBranches not implemented")
}
func (UnimplementedProductServiceServer) GetBranchInventory(context.Context, *GetBranchInventoryRequest) (*GetBranchInventoryResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetBranchInventory not implemented")
}
func (UnimplementedProductServiceServer) UpdateBranchInventory(context.Context, *UpdateBranchInventoryRequest) (*UpdateBranchInventoryResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateBranchInventory not implemented")
}
func (UnimplementedProductServiceServer) ListAttachableProducts(context.Context, *ListAttachableProductsRequest) (*ListAttachableProductsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListAttachableProducts not implemented")
}
func (UnimplementedProductServiceServer) ListAllProducts(context.Context, *ListAllProductsRequest) (*ListAllProductsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListAllProducts not implemented")
}
func (UnimplementedProductServiceServer) mustEmbedUnimplementedProductServiceServer() {}
func (UnimplementedProductServiceServer) testEmbeddedByValue()                        {}

// UnsafeProductServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ProductServiceServer will
// result in compilation errors.
type UnsafeProductServiceServer interface {
	mustEmbedUnimplementedProductServiceServer()
}

func RegisterProductServiceServer(s grpc.ServiceRegistrar, srv ProductServiceServer) {
	// If the following call pancis, it indicates UnimplementedProductServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&ProductService_ServiceDesc, srv)
}

func _ProductService_GetFoodByID_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetFoodRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProductServiceServer).GetFoodByID(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ProductService_GetFoodByID_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProductServiceServer).GetFoodByID(ctx, req.(*GetFoodRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ProductService_GetAccessoryByID_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetAccessoryRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProductServiceServer).GetAccessoryByID(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ProductService_GetAccessoryByID_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProductServiceServer).GetAccessoryByID(ctx, req.(*GetAccessoryRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ProductService_GetMedicineByID_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetMedicineRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProductServiceServer).GetMedicineByID(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ProductService_GetMedicineByID_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProductServiceServer).GetMedicineByID(ctx, req.(*GetMedicineRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ProductService_ListFoods_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListFoodRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProductServiceServer).ListFoods(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ProductService_ListFoods_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProductServiceServer).ListFoods(ctx, req.(*ListFoodRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ProductService_ListAccessories_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListAccessoryRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProductServiceServer).ListAccessories(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ProductService_ListAccessories_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProductServiceServer).ListAccessories(ctx, req.(*ListAccessoryRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ProductService_ListMedicines_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListMedicineRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProductServiceServer).ListMedicines(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ProductService_ListMedicines_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProductServiceServer).ListMedicines(ctx, req.(*ListMedicineRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ProductService_CreateFood_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateFoodRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProductServiceServer).CreateFood(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ProductService_CreateFood_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProductServiceServer).CreateFood(ctx, req.(*CreateFoodRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ProductService_CreateAccessory_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateAccessoryRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProductServiceServer).CreateAccessory(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ProductService_CreateAccessory_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProductServiceServer).CreateAccessory(ctx, req.(*CreateAccessoryRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ProductService_CreateMedicine_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateMedicineRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProductServiceServer).CreateMedicine(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ProductService_CreateMedicine_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProductServiceServer).CreateMedicine(ctx, req.(*CreateMedicineRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ProductService_UpdateFood_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateFoodRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProductServiceServer).UpdateFood(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ProductService_UpdateFood_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProductServiceServer).UpdateFood(ctx, req.(*UpdateFoodRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ProductService_UpdateAccessory_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateAccessoryRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProductServiceServer).UpdateAccessory(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ProductService_UpdateAccessory_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProductServiceServer).UpdateAccessory(ctx, req.(*UpdateAccessoryRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ProductService_UpdateMedicine_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateMedicineRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProductServiceServer).UpdateMedicine(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ProductService_UpdateMedicine_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProductServiceServer).UpdateMedicine(ctx, req.(*UpdateMedicineRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ProductService_DeleteFood_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteFoodRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProductServiceServer).DeleteFood(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ProductService_DeleteFood_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProductServiceServer).DeleteFood(ctx, req.(*DeleteFoodRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ProductService_DeleteAccessory_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteAccessoryRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProductServiceServer).DeleteAccessory(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ProductService_DeleteAccessory_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProductServiceServer).DeleteAccessory(ctx, req.(*DeleteAccessoryRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ProductService_DeleteMedicine_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteMedicineRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProductServiceServer).DeleteMedicine(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ProductService_DeleteMedicine_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProductServiceServer).DeleteMedicine(ctx, req.(*DeleteMedicineRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ProductService_GetBranchByID_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetBranchRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProductServiceServer).GetBranchByID(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ProductService_GetBranchByID_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProductServiceServer).GetBranchByID(ctx, req.(*GetBranchRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ProductService_ListBranches_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListBranchRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProductServiceServer).ListBranches(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ProductService_ListBranches_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProductServiceServer).ListBranches(ctx, req.(*ListBranchRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ProductService_GetBranchInventory_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetBranchInventoryRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProductServiceServer).GetBranchInventory(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ProductService_GetBranchInventory_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProductServiceServer).GetBranchInventory(ctx, req.(*GetBranchInventoryRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ProductService_UpdateBranchInventory_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateBranchInventoryRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProductServiceServer).UpdateBranchInventory(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ProductService_UpdateBranchInventory_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProductServiceServer).UpdateBranchInventory(ctx, req.(*UpdateBranchInventoryRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ProductService_ListAttachableProducts_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListAttachableProductsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProductServiceServer).ListAttachableProducts(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ProductService_ListAttachableProducts_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProductServiceServer).ListAttachableProducts(ctx, req.(*ListAttachableProductsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ProductService_ListAllProducts_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListAllProductsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProductServiceServer).ListAllProducts(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ProductService_ListAllProducts_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProductServiceServer).ListAllProducts(ctx, req.(*ListAllProductsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// ProductService_ServiceDesc is the grpc.ServiceDesc for ProductService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ProductService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "ProductService",
	HandlerType: (*ProductServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetFoodByID",
			Handler:    _ProductService_GetFoodByID_Handler,
		},
		{
			MethodName: "GetAccessoryByID",
			Handler:    _ProductService_GetAccessoryByID_Handler,
		},
		{
			MethodName: "GetMedicineByID",
			Handler:    _ProductService_GetMedicineByID_Handler,
		},
		{
			MethodName: "ListFoods",
			Handler:    _ProductService_ListFoods_Handler,
		},
		{
			MethodName: "ListAccessories",
			Handler:    _ProductService_ListAccessories_Handler,
		},
		{
			MethodName: "ListMedicines",
			Handler:    _ProductService_ListMedicines_Handler,
		},
		{
			MethodName: "CreateFood",
			Handler:    _ProductService_CreateFood_Handler,
		},
		{
			MethodName: "CreateAccessory",
			Handler:    _ProductService_CreateAccessory_Handler,
		},
		{
			MethodName: "CreateMedicine",
			Handler:    _ProductService_CreateMedicine_Handler,
		},
		{
			MethodName: "UpdateFood",
			Handler:    _ProductService_UpdateFood_Handler,
		},
		{
			MethodName: "UpdateAccessory",
			Handler:    _ProductService_UpdateAccessory_Handler,
		},
		{
			MethodName: "UpdateMedicine",
			Handler:    _ProductService_UpdateMedicine_Handler,
		},
		{
			MethodName: "DeleteFood",
			Handler:    _ProductService_DeleteFood_Handler,
		},
		{
			MethodName: "DeleteAccessory",
			Handler:    _ProductService_DeleteAccessory_Handler,
		},
		{
			MethodName: "DeleteMedicine",
			Handler:    _ProductService_DeleteMedicine_Handler,
		},
		{
			MethodName: "GetBranchByID",
			Handler:    _ProductService_GetBranchByID_Handler,
		},
		{
			MethodName: "ListBranches",
			Handler:    _ProductService_ListBranches_Handler,
		},
		{
			MethodName: "GetBranchInventory",
			Handler:    _ProductService_GetBranchInventory_Handler,
		},
		{
			MethodName: "UpdateBranchInventory",
			Handler:    _ProductService_UpdateBranchInventory_Handler,
		},
		{
			MethodName: "ListAttachableProducts",
			Handler:    _ProductService_ListAttachableProducts_Handler,
		},
		{
			MethodName: "ListAllProducts",
			Handler:    _ProductService_ListAllProducts_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "products.proto",
}
